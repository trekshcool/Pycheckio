type: checkiO
files:
  - name: mission.py
    visible: true
    text: |
      def longest_prefix(arr: list[str]) -> str:
          # your code here
          return ""
      
      
      print("Example:")
      print(longest_prefix(["flower", "flow", "flight"]))
      
      # These "asserts" are used for self-checking
      assert longest_prefix(["flower", "flow", "flight"]) == "fl"
      assert longest_prefix(["dog", "racecar", "car"]) == ""
      assert longest_prefix(["apple", "application", "appetizer"]) == "app"
      assert longest_prefix(["a"]) == "a"
      assert longest_prefix(["", "b"]) == ""
      assert longest_prefix(["same", "same", "same"]) == "same"
      assert longest_prefix(["mismatch", "mister", "miss"]) == "mis"
      assert longest_prefix(["alphabet", "alpha", "alphadog"]) == "alpha"
      assert longest_prefix(["book", "boot", "booster"]) == "boo"
      assert longest_prefix(["short", "shore", "shot"]) == "sho"
      
      print("The mission is done! Click 'Check Solution' to earn rewards!")
    learner_created: false
status: Unchecked
code: |
  def longest_prefix(arr: list[str]) -> str:
      # your code here
      return ""


  print("Example:")
  print(longest_prefix(["flower", "flow", "flight"]))

  # These "asserts" are used for self-checking
  assert longest_prefix(["flower", "flow", "flight"]) == "fl"
  assert longest_prefix(["dog", "racecar", "car"]) == ""
  assert longest_prefix(["apple", "application", "appetizer"]) == "app"
  assert longest_prefix(["a"]) == "a"
  assert longest_prefix(["", "b"]) == ""
  assert longest_prefix(["same", "same", "same"]) == "same"
  assert longest_prefix(["mismatch", "mister", "miss"]) == "mis"
  assert longest_prefix(["alphabet", "alpha", "alphadog"]) == "alpha"
  assert longest_prefix(["book", "boot", "booster"]) == "boo"
  assert longest_prefix(["short", "shore", "shot"]) == "sho"

  print("The mission is done! Click 'Check Solution' to earn rewards!")
seconds_from_change: 9223372036854775807
